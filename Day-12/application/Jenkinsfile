pipeline {
    agent { label 'built-in' }
    tools {
        "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform"
    }
    options {
        ansiColor('vga')
    }
    parameters {
        string(name: 'CONSUL_STATE_PATH', defaultValue: 'applications/state/globo-primary')
        string(name: 'WORKSPACE', defaultValue: 'development')
    }
    environment {
        TF_HOME = tool('terraform')
        TF_INPUT = "0"
        TF_IN_AUTOMATION = "TRUE"
        TF_VAR_consul_address = "192.168.1.10"
        TF_LOG = "WARN"
        CONSUL_HTTP_TOKEN = credentials('applications-consul-token')
        AWS_ACCESS_KEY_ID = credentials('aws_access_key')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        PATH = "$TF_HOME:$PATH"
    }
    stages {
        stage('Application Init') {
            steps {
                dir('Day-12/application/') {
                    sh "terraform --version"
                    sh "terraform init --backend-config='path=${params.CONSUL_STATE_PATH}'"
                }
            }
        }
        stage('Application Validate') {
            steps {
                dir('Day-12/application/') {
                    sh "terraform validate"
                }
            }
        }
        stage('Application Plan') {
            steps {
                dir('Day-12/application/') {
                    script {
                        try {
                            sh "terraform workspace new ${params.WORKSPACE}"
                        } catch (e) {                                                                                                                                   
                            sh "terraform workspace select ${params.WORKSPACE}"
                        }
                        sh "terraform plan --out terraform-application.tfplan; echo \$? > status"
                        stash name: "terraform-application-plan", include: "terraform-application.tfplan"
                    }
                }
            }
        }
        stage('Application Apply') {
            steps {
                dir('Day-12/networking/') {
                    script {
                        def apply = false
                        try {
                            input message: 'confirm apply', ok: "Apply Config"
                            apply = true
                        } catch (e) {
                            apply = false
                            dir('Day-12/application/') {
                                sh "terraform destroy -auto-approve"
                            }
                            currentBuild.result = 'UNSTABLE'
                        }
                        if(apply) {
                            dir('Day-12/application/') {
                                unstash "terraform-application-plan"
                                sh "terraform apply -auto-approve"
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                if (getContext(hudson.FilePath)) {
                    deleteDir()
                    telegramSend(message: '''Build [$PROJECT_NAME]($PROJECT_URL) \nBuild Number [$BUILD_NUMBER]($BUILD_URL) result with status: *$BUILD_STATUS* \n[Build log]($BUILD_URL/console)''', chatId:-535274016)
                }
            }
        }
    }
}