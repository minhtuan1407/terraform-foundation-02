pipeline {
    agent { label 'built-in' }
    tools {
        "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform"
    }
    options {
        ansiColor('vga')
    }
    parameters {
        string(name: 'CONSUL_STATE_PATH', defaultValue: 'networking/state/globo-primary')
        string(name: 'WORKSPACE', defaultValue: 'development')
    }
    environment {
        TF_HOME = tool('terraform')
        TF_INPUT = "0"
        TF_IN_AUTOMATION = "TRUE"
        TF_VAR_consul_address = "192.168.1.10"
        TF_LOG = "WARN"
        CONSUL_HTTP_TOKEN = credentials('networking-consul-token')
        AWS_ACCESS_KEY_ID = credentials('aws_access_key')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        PATH = "$TF_HOME:$PATH"
    }
    stages {
        stage('Networking Init') {
            steps {
                dir('Day-12/networking/') {
                    sh "terraform --version"
                    sh "terraform init --backend-config='path=${params.CONSUL_STATE_PATH}'"
                }
            }
        }
        stage('Networking Validate') {
            steps {
                dir('Day-12/networking/') {
                    sh "terraform validate"
                }
            }
        }
        stage('Networking Plan') {
            steps {
                dir('Day-12/networking/') {
                    script {
                        try {
                            sh "terraform workspace new ${params.WORKSPACE}"
                        } catch (e) {
                            sh "terraform workspace select ${params.WORKSPACE}"
                        }
                        sh "terraform plan --out terraform-network.tfplan; echo \$? > status"
                        stash name: "terraform-networking-plan", includes: "terraform-network.tfplan"
                    }
                }
            }
        }
        stage('Networking Apply') {
            steps {
                dir('Day-12/networking/') {
                    script {
                        def apply = false
                        try {
                            input message: 'confirm apply', ok: "Apply Config"
                            apply = true
                        } catch (e) {
                            apply = false
                            dir('Day-12/networking/') {
                                sh "terraform destroy -auto-approve"
                            }
                            currentBuild.result = 'UNSTABLE'
                        }
                        if(apply) {
                            dir('Day-12/networking/') {
                                unstash "terraform-networking-plan"
                                sh "terraform apply terraform-network.tfplan"
                            }
                        }
                    }
                }
            }
        }
    }
    // post {
    //     always {
    //         // notifyEvents message: '''Tuan is testing
    //         // Build <a href="$PROJECT_URL">$PROJECT_NAME</a>
    //         // Build Number <a href="$BUILD_URL">$BUILD_NUMBER</a> result with status: <b>$BUILD_STATUS</b>
    //         // <a href="$BUILD_URL/console">Build log</a> on host ${ip_server}''',
    //         //     token: 'zqMYpf7aCt0Wl3T_IMdsh-LOUzf7_G8T'

    //         // emailext subject: 'Jenkins ${BUILD_STATUS} [#${BUILD_NUMBER}] - ${PROJECT_NAME}',
    //         // body: '''Build <a href="$PROJECT_URL">$PROJECT_NAME</a> <br>
    //         // Build Number <a href="$BUILD_URL">$BUILD_NUMBER</a> result with status: <b>$BUILD_STATUS</b> <br>
    //         // <a href="$BUILD_URL/console">Build log</a> on host ${ip_server}''',
    //         // to: 'tech@tel4vn.com',
    //         // attachLog: true

    //         telegramSend(message: '''Build [$PROJECT_NAME]($PROJECT_URL) \nBuild Number [$BUILD_NUMBER]($BUILD_URL) result with status: *$BUILD_STATUS* \n[Build log]($BUILD_URL/console)''',
    //         chatId:-535274016)
    //     }
    // }
}